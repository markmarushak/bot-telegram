# -*- coding: utf-8 -*-
# !/usr/bin/python

# This is a simple echo bot using the decorator mechanism.
# It echoes any incoming text messages.

import telebot
from telebot import types
from telebot import util
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
import re
from _functions import *
from keyboard import *
import time

# –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
# API_TOKEN = '724197308:AAEeHcxWTH-CGUxokIHZBYm-_5P2rrIHKpA'
# –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —á—Ç–æ–± –Ω–µ –º–µ—à–∞—Ç—å –≥–ª–∞–≤–Ω–æ–º—É
API_TOKEN = '633808414:AAGgQ3vSO6-7vdRj4YFnLTGuh1P302bmCuM'

bot = telebot.TeleBot(API_TOKEN)

chat_bot = 'callback_query'
# host = "https://rezway.com.ua"
# api = host + '/index.php?route=api/product/'
# method = 'get'
user = fullname = phone = currentTotal = currentProduct = search = category = ""
# normal / fast / call phone
operation = 'normal'
repository = {
    'name': '',
    'data': ''
}

# Handle '/start' and '/help'
@bot.message_handler(commands=['start'])
def send_welcome(message):
    global chat_bot
    chat_bot = message.chat.id
    try:
        api('&chat_id='+str(message.chat.id), 'add_account')
        text = "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π —à–∏–Ω—ã"
        bot.send_message(message.chat.id, text, reply_markup=seasson())
    except Exception as e:
        bot.send_message(chat_bot, e)
    
@bot.message_handler(commands=['news_spam'])
def send_spam(message):
    global chat_bot
    chat_bot = message.chat.id
    bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞–µ—Ç—å—Å—è —Å–ø–∞–º –Ω–æ–≤—Å—Ç–µ–π, –ú—É—Ö–∞—Ö–∞—Ö')
    try:
        data_news = api('', 'news_spam')# –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å 
        users = api('', 'get_accounts')# –±–µ—Ä–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 
        # –ø–æ –æ—á–µ—Ä–µ–¥–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å 
        for i in users.get('data'):
            bot.send_message(i.get('chat_id'), data_news.get('data'))

    except Exception as e:
        bot.send_message(chat_bot, e)

# –Ω–∞–¥–æ —É–±—Ä–∞—Ç—å –≤–µ—Å—å –ª–∏—à–Ω–∏–π –∫–æ–¥ –∏–∑ echo_message 
# –∑–∞ —Å—á–µ—Ç —Ç–æ–≥–æ —á—Ç–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
def main_menu(message):
    getCart(message)
    getNews(message)
    getSetting(message)

def back_to_home(message):
    pass

def news_week(message):
    try:
        result = api('', 'news_week')
        for article in result.get('data'):
            bot.send_message(message.chat.id, article)
    except Exception as e:
        bot.send_message(message.chat.id, 'news a week not loaded, sorry')

def news_last(message):
    try:
        result = api('', 'news_last')
        for article in result.get('data'):
            bot.send_message(message.chat.id, article)
    except Exception as e:
        bot.send_message(message.chat.id, 'news a week not loaded, sorry')

def change_fio(message):
    try:
        query = '&chat_id='+str(chat_bot)+'&fio='+message.text
        api(query, 'change_fio')
    except Exception as e:
        bot.send_message(chat_bot, '–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –§–ò–û')

def change_phone(message):
    try:
        query = '&chat_id='+str(chat_bot)+'&phone='+message.text
        api(query, 'change_phone')
    except Exception as e:
        bot.send_message(chat_bot, '–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')

def filters(t):
    global search
    text = t.replace(' ','')
    search = text[:6]+' '+text[6:]

def change_total(message, id):
    try:
        query = '&chat_id='+str(chat_bot)+'&id='+id+'&total='+message.text
        api(query, 'change_total')
        getCart()
    except Exception as e:
        bot.send_message(chat_bot, '–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ')


def send_to_manager(button_name, message, text = 'null'):
    checkAuth()
    try:
        if text == 'null':
            bot.send_message(chat_bot, user.get('fullname') + ' —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—å—Å—è –º–µ–Ω–µ–∂–¥–µ—Ä', reply_markup=seasson())
            text = 'Telebot Api ' + button_name + ' \r\n –ó–∞–∫–∞–∑—á–∏–∫: ' + user.get(
                'fullname') + '\r\n —Ç–µ–ª–µ—Ñ–æ–Ω: ' + user.get('phone') + '\r\n –¢–æ–≤–∞—Ä: ' + currentProduct.get('name')

            if currentTotal != '':
                text = text + '\r\n –ö–æ–ª-–≤–æ ' + currentTotal

        msg = bot.send_message('-374993145', text, parse_mode='HTML')
        bot.register_next_step_handler(msg, send_welcome)
    except Exception as e:
        bot.send_message(chat_bot, '–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω–µ–∂—Ä—É –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å')

def fast_buy(message):
    global currentTotal
    currentTotal = message.text
    if user != 0:
        send_to_manager('–ë—ã—Å—Ç—Ä–∞—è –ø–æ–∫—É–ø–∫–∞', message)
    else:
        msg = bot.send_message(chat_bot, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
        bot.register_next_step_handler(msg, get_fullname)

def getWays(message):
    global category
    if message.text in "‚òÄ –õ–µ—Ç–Ω—è—è ‚ôª –í—Å–µ—Å–µ–∑–æ–Ω–Ω–∞—è ‚ùÑ –ó–∏–º–Ω—è—è":
        category = message.text
        text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ " + category + " \r\n –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–∏–ø–æ—Ä–∞–∑–º–µ—Ä –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É 190/50 R13 \r\n –≥–¥–µ: 190 - —à–∏—Ä–∏–Ω–∞, 50 - –ø—Ä–æ—Ñ–∏–ª—å, R13 - –î–∏–∞–º–µ—Ç—Ä"
        msg = bot.send_message(message.chat.id, text)
        bot.register_next_step_handler(msg, parameters_tire)

def getSetting(message):
    global operation
    if message.text in "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        try:
            if user != 0:
                bot.send_message(message.chat.id, '–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ \r –§–ò–û: '+user.get('fullname')+'\r –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '+ user.get('phone'), reply_markup=setting())
            else:
                operation = 'Register'
                get_fullname()

        except Exception as e:
            bot.send_message(chat_bot, 'error get setting')

def getNews(message):
    if message.text in "–ù–æ–≤–æ—Å—Ç–∏ üì∞":
        try:
            # see next to CallBack_functions
            bot.send_message(message.chat.id, '–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å?', reply_markup=news_btn())

        except Exception as e:
            bot.send_message(chat_bot, 'error get news_btn')

def getCart(message):
    global repository
    if message.text in '–ö–æ—Ä–∑–∏–Ω–∞ üõí':
        if user != 0:
            response = api('&chat_id=' + user.get('chat_id'), 'get_cart')
            status = response.get('status')
            if status == 200:
                repository.update({
                    'name': 'cart',
                    'data': response.get('data')
                })
                photo(response, user.get('chat_id'), 'cart')
                bot.send_message(chat_bot, '–ö–æ—Ä–∑–∏–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤', reply_markup=cart())
            else:
                bot.send_message(chat_bot, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä.. –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
        else:
            bot.send_message(chat_bot, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä.. –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')

def checkAuth():
    global user
    try:
        response = api('&chat_id=' + str(chat_bot), 'user')
        if response.get('status') == 200:
            user = response.get('data')
        else:
            user = 0
    except Exception as e:
        # bot.send_message(chat_bot, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', reply_markup=seasson())
        user = 0


def rows(message):
    global method, results, category, repository
    try:
        query = '&category=' + category + '&search=' + search
        response = api(query, 'search')
        if response.get('status') == 200:
            repository.update({
                'name': 'rows',
                'data': response.get('data')
            })
            photo(response, chat_bot)
        else:
            if message.text == "‚òÄ –õ–µ—Ç–Ω—è—è" or message.text == "‚ôª –í—Å–µ—Å–µ–∑–æ–Ω–Ω–∞—è" or message.text == "‚ùÑ –ó–∏–º–Ω—è—è":
                category = message.text
                text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ " + category + " \r\n –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–∏–ø–æ—Ä–∞–∑–º–µ—Ä –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É 190/50 R13 \r\n –≥–¥–µ: 190 - —à–∏—Ä–∏–Ω–∞, 50 - –ø—Ä–æ—Ñ–∏–ª—å, R13 - –î–∏–∞–º–µ—Ç—Ä"
                msg = bot.send_message(chat_bot, text)
                bot.register_next_step_handler(msg, parameters_tire)
            else:
                msg = bot.send_message(chat_bot,
                                       '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É ' + category + ' –∏ –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å ' + search + ' \r\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
                bot.register_next_step_handler(msg, parameters_tire)
    except Exception as e:
        # bot.send_message(chat_bot, '–û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤')
        bot.send_message(chat_bot, e)



def parameters_tire(message):
    global operation
    filters(message.text)
    main_menu(message)
    # if message.text == '/start':
	   #  send_welcome(message)
    # elif message.text in "–ù–æ–≤–æ—Å—Ç–∏ üì∞":
    #     try:
    #         # see next to CallBack_functions
    #         bot.send_message(message.chat.id, '–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å?', reply_markup=news_btn())

    #     except Exception as e:
    #         bot.send_message(chat_bot, 'error get news_btn')
    # elif message.text in "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
    #     try:
    #         if user != 0:
    #             bot.send_message(message.chat.id, '–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ \r –§–ò–û: '+user.get('fullname')+'\r –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '+ user.get('phone'), reply_markup=setting())
    #         else:
    #             operation = 'Register'
    #             get_fullname()
    #     except Exception as e:
    #         bot.send_message(chat_bot, 'error get setting')
    rows(message)


def get_fullname(message):
    global fullname
    fullname = message.text
    msg = bot.send_message(chat_bot, message.text + "\r\n–í–≤–µ–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    bot.register_next_step_handler(msg, get_phone)


def get_phone(message):
    global phone
    phone = message.text
    method = 'add_contact'
    query = '&fullname=' + fullname + '&phone=' + phone + "&chat_id=" + str(chat_bot)
    response = api(query, method)
    if response.get('status') == 403:
        bot.send_message(chat_bot, response.get('data'))
    elif response.get('status') == 200:
        if operation == 'normal':
            bot.send_message(chat_bot,
                                   '–í–∞—à —Ç–æ–≤–∞—Ä –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã. ' + fullname + ' –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫—É, –∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É')
            send_welcome(message)
        elif operation == 'fast':
            send_to_manager('–ë—ã—Å—Ç—Ä–∞—è –ø–æ–∫—É–ø–∫–∞', message)
        elif operation == 'call phone':
            send_to_manager('–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫', message)
        elif operation in 'Register':
            bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞–∏—é', reply_markup=seasson())

# when use callback_data in KeyButton
@bot.callback_query_handler(func=lambda message: True)
def callback_query(message):
    global currentProduct, method, operation, currentTotal
    try:
        if message.data == "–∫–æ—Ä–∑–∏–Ω–∞_–¥–æ–±–∞–≤–∏—Ç—å":

            operation = 'normal'
            msg = bot.send_message(chat_bot, "–í—ã—å–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ:", reply_markup=totals())
            bot.register_next_step_handler(msg, echo_message)

        elif message.data == "–∑–≤–æ–Ω–æ–∫":
            currentTotal = ''
            if user != 0:

                send_to_manager('–û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫', message)

            else:
                operation = 'call phone'
                msg = bot.send_message(chat_bot, '–í–µ–¥–∏—Ç–µ –§–ò–û')
                bot.register_next_step_handler(msg, get_fullname)

        elif message.data == "–±—ã—Å—Ç—Ä–∞—è":

            operation = 'fast'
            msg = bot.send_message(chat_bot, "–í—ã–±—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ", reply_markup=totals())
            bot.register_next_step_handler(msg, fast_buy)

        elif message.data in "change_fio":
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û")
            bot.register_next_step_handler(msg, change_fio)
        elif message.data in "change_phone":
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            bot.register_next_step_handler(msg, change_phone)
        elif message.data in "news_week":
            news_week(message)
        elif message.data in "news_last":
            news_last(message)
        else:

            if repository.get('name') == 'rows':

                product = currentProduct = repository.get('data')[message.data]

                #this function done after click order a product
                # one_product(product, chat_bot, item)
                try:
                    one_product(product, chat_bot)
                except Exception as e:
                    bot.send_message(chat_bot, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞')

            elif repository.get('name') == 'cart':

                id = message.data[1:]

                if message.data[:1] == 'd':

                    if del_cart(id, user.get('chat_id')).get('status') == 200:

                        getCart()

                    else:

                        bot.answer_callback_query(message.id, '–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å')

                elif message.data[:1] == 'c':

                    msg = bot.send_message(chat_bot, '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª-–≤–æ')
                    bot.register_next_step_handler(msg, change_total, id=id)

    except Exception as e:
        bot.send_message(chat_bot, '–û—à–∏–±–∫–∞ –≤ Callback —Ñ—É–Ω–∫—Ü–∏–∏', reply_markup=seasson())


# any text out puted user
@bot.message_handler(func=lambda message: True)
def echo_message(message):
    global category, chat_bot, method, currentTotal, operation

    try:

        chat_bot = message.chat.id
        checkAuth()
        main_menu(message)
        if message.text in "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é":
            send_welcome(message)
        elif message.text in "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ":
            try:
                bot.send_message(chat_bot, '–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞')
                response = api("&chat_id="+str(chat_bot),"order_buy")
                send_to_manager('–ó–∞–∫–∞–∑', message, response.get('data'))
            except Exception as e:
                bot.send_message(chat_bot, '–æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–æ—Ä–≤–∞–ª–∞—Å—å')
        # elif message.text == "‚òÄ –õ–µ—Ç–Ω—è—è" or message.text == "‚ôª –í—Å–µ—Å–µ–∑–æ–Ω–Ω–∞—è" or message.text == "‚ùÑ –ó–∏–º–Ω—è—è":
        # elif message.text in "‚òÄ –õ–µ—Ç–Ω—è—è ‚ôª –í—Å–µ—Å–µ–∑–æ–Ω–Ω–∞—è ‚ùÑ –ó–∏–º–Ω—è—è":

        #     category = message.text
        #     text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ " + category + " \r\n –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–∏–ø–æ—Ä–∞–∑–º–µ—Ä –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É 190/50 R13 \r\n –≥–¥–µ: 190 - —à–∏—Ä–∏–Ω–∞, 50 - –ø—Ä–æ—Ñ–∏–ª—å, R13 - –î–∏–∞–º–µ—Ç—Ä"
        #     msg = bot.send_message(message.chat.id, text)
        #     bot.register_next_step_handler(msg, parameters_tire)

        # elif message.text in "–ö–æ—Ä–∑–∏–Ω–∞ üõí":
        #     try:
        #         if user != 0:
        #             getCart()
        #         else:
        #             bot.send_message(chat_bot, '–í—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –ø–æ–∫—É–ø')
        #     except Exception as e:
        #         bot.send_message(chat_bot, 'error get cart')

        # elif message.text in "–ù–æ–≤–æ—Å—Ç–∏ üì∞":
        #     try:
        #         # see next to CallBack_functions
        #         bot.send_message(message.chat.id, '–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å?', reply_markup=news_btn())

        #     except Exception as e:
        #         bot.send_message(chat_bot, 'error get news_btn')
        # elif message.text in "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        #     try:
        #         if user != 0:
        #             bot.send_message(message.chat.id, '–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ \r –§–ò–û: '+user.get('fullname')+'\r –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '+ user.get('phone'), reply_markup=setting())
        #         else:
        #             operation = 'Register'
        #             get_fullname()

        #     except Exception as e:
        #         bot.send_message(chat_bot, 'error get setting')

        elif bool(re.match(r'^\d{1}|[1-5]', message.text)):

            currentTotal = message.text

            if operation == 'normal':
                try:
                    query = '&chat_id=' + str(chat_bot) + '&product=' + currentProduct.get(
                        'product_id') + "&total=" + currentTotal
                    response = api(query, 'add_cart')

                    if response.get('status') == 403:
                        # bot.send_message(chat_bot, response.get('data'), reply_markup=seasson())
                        bot.send_message(message.chat.id, '–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É', reply_markup=seasson())
                    else:
                        name = user.get('fullname')
                        msg = bot.send_message(chat_bot,
                                               '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É ' + name + "\r –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫",
                                               reply_markup=seasson())
                except Exception as e:
                    msg = bot.send_message(chat_bot,
                                           "–í–≤–µ–¥–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑—ã –≤–∞–º –Ω–µ –ø—Ä–∏–π–¥–µ—Ç—Å—è —ç—Ç–æ—Ç —à–∞–≥ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å \r\n\r\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û ",
                                           reply_markup=seasson())
                    bot.register_next_step_handler(msg, get_fullname)

        else:
            bot.send_message(message.chat.id, '–ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')

    except Exception as e:

        bot.send_message(chat_bot, 'echo text error', reply_markup=seasson())


# bot.polling()


while True:
    try:
        bot.polling()
    except Exception:
        time.sleep(15)
